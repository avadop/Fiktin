{"remainingRequest":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-upload-image\\dist\\upload_image.vue?vue&type=style&index=0&id=590170d4&lang=css&scoped=true&","dependencies":[{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-upload-image\\dist\\upload_image.vue","mtime":499162500000},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi52dWVfY29tcG9uZW50X191cGxvYWQtLWltYWdlIHsKICAgIHBhZGRpbmc6IDVweDsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIG1pbi1oZWlnaHQ6IDgwcHg7CiAgICBib3JkZXItcmFkaXVzOiA1cHg7Cn0KCi52dWVfY29tcG9uZW50X191cGxvYWQtLWltYWdlLmRyYWdvdmVyIHsKfQoKLnZ1ZV9jb21wb25lbnRfX3VwbG9hZC0taW1hZ2UgZm9ybSA+IGRpdiB7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCi52dWVfY29tcG9uZW50X191cGxvYWQtLWltYWdlIC51cGxvYWRfaW1hZ2VfZm9ybV9fdGh1bWJuYWlscyB7CiAgICBtYXJnaW4tYm90dG9tOiAxZW07Cn0KCi52dWVfY29tcG9uZW50X191cGxvYWQtLWltYWdlIC51cGxvYWRfaW1hZ2VfZm9ybV9fdGh1bWJuYWlsIHsKICAgIGJvcmRlci1yYWRpdXM6IDIuNXB4OwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgd2lkdGg6IDIwJTsKICAgIHBhZGRpbmc6IDIwJSAwIDA7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgbWFyZ2luOiAxMHB4OwogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgoudnVlX2NvbXBvbmVudF9fdXBsb2FkLS1pbWFnZSAudXBsb2FkX2ltYWdlX2Zvcm1fX3RodW1ibmFpbCBpbWcgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgdG9wOiA1MCU7CiAgICBsZWZ0OiA1MCU7CiAgICBtaW4td2lkdGg6IDEwMCU7CiAgICBtaW4taGVpZ2h0OiAxMDAlOwogICAgbWF4LWhlaWdodDogMTUwJTsKICAgIG9wYWNpdHk6IDA7CiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTsKICAgIHRyYW5zaXRpb246IDFzIG9wYWNpdHk7Cn0KCi52dWVfY29tcG9uZW50X191cGxvYWQtLWltYWdlIC51cGxvYWRfaW1hZ2VfZm9ybV9fdGh1bWJuYWlsIGltZy5zaG93IHsKICAgIG9wYWNpdHk6IDE7Cn0KCi52dWVfY29tcG9uZW50X191cGxvYWQtLWltYWdlIC51cGxvYWRfaW1hZ2VfZm9ybV9fdGh1bWJuYWlsIGltZzpob3ZlciB7CiAgICBmaWx0ZXI6IGJsdXIoMnB4KTsKfQoKLnZ1ZV9jb21wb25lbnRfX3VwbG9hZC0taW1hZ2UgLnVwbG9hZF9pbWFnZV9mb3JtX190aHVtYm5haWwuYmFkLXNpemUgaW1nIHsKICAgIGZpbHRlcjogZ3JheXNjYWxlKDEwMCUpOwp9CgoudnVlX2NvbXBvbmVudF9fdXBsb2FkLS1pbWFnZSAudXBsb2FkX2ltYWdlX2Zvcm1fX3RodW1ibmFpbC51cGxvYWRlZCBpbWcgewogICAgb3BhY2l0eTogMC4xOwp9CgoudnVlX2NvbXBvbmVudF9fdXBsb2FkLS1pbWFnZSAudXBsb2FkX2ltYWdlX2Zvcm1fX3RodW1ibmFpbCBzcGFuIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHRvcDogLTVweDsKICAgIGxlZnQ6IDBweDsKICAgIHotaW5kZXg6IDEwMDsKICAgIHBhZGRpbmc6IDBweCAxcHg7CiAgICBib3JkZXItcmFkaXVzOiAycHg7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5Owp9Cg=="},{"version":3,"sources":["upload_image.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiVA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"upload_image.vue","sourceRoot":"node_modules/vue-upload-image/dist","sourcesContent":["<template>\r\n    <div class=\"vue_component__upload--image\" v-bind:class=\"{ 'dragover': onDragover }\">\r\n        <form v-bind:id=\"'upload_image_form--' + input_id\" enctype=\"multipart/form-data\">\r\n            <div class=\"upload_image_form__thumbnails\">\r\n                <div v-for=\"(value, key) in files\" class=\"upload_image_form__thumbnail\"\r\n                     v-on:click=\"fileClick($event, key)\"\r\n                     v-bind:class=\"{ 'uploaded': value.uploaded, 'bad-size': value.bad_size }\">\r\n                    <span v-on:click=\"fileDelete($event, key)\">\r\n                    &#x2716;\r\n                    </span>\r\n                    <img v-bind:src=\"image[key]\" v-bind:class=\"{ 'show': image[key]}\">\r\n                </div>\r\n            </div>\r\n            <input type=\"file\" v-bind:id=\"'upload_image_form__input--' + input_id\" hidden multiple/>\r\n            <div>\r\n                <button type=\"submit\"\r\n                        v-bind:class=\"button_class\"\r\n                        v-on:click=\"submit\"\r\n                        v-bind:disabled=\"onUploading\"\r\n                        v-html=\"button_html\"></button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'upload-image',\r\n        props: {\r\n            input_id: {\r\n                type: String,\r\n                required: false,\r\n                default: \"default\"\r\n            },\r\n            url: {\r\n                type: String,\r\n                required: true,\r\n                default: null\r\n            },\r\n            name: {\r\n                type: String,\r\n                required: false,\r\n                default: 'images[]'\r\n            },\r\n            disable_upload: {\r\n                type: Boolean,\r\n                required: false,\r\n                default: false\r\n            },\r\n            max_batch: {\r\n                type: Number,\r\n                required: false,\r\n                default: 0\r\n            },\r\n            max_files: {\r\n                type: Number,\r\n                required: false,\r\n                default: 10\r\n            },\r\n            max_filesize: {\r\n                type: Number,\r\n                required: false,\r\n                default: 8000\r\n            },\r\n            resize_enabled: {\r\n                type: Boolean,\r\n                required: false,\r\n                default: false\r\n            },\r\n            resize_max_width: {\r\n                type: Number,\r\n                required: false,\r\n                default: 800\r\n            },\r\n            resize_max_height: {\r\n                type: Number,\r\n                required: false,\r\n                default: 600\r\n            },\r\n            button_html: {\r\n                type: String,\r\n                required: false,\r\n                default: 'Upload Images'\r\n            },\r\n            button_class: {\r\n                type: String,\r\n                required: false,\r\n                default: 'btn btn-primary'\r\n            }\r\n        },\r\n        data: function () {\r\n            return {\r\n                form: null,\r\n                input: null,\r\n                index: 0,\r\n                total: 0,\r\n                files: {},\r\n                image: {},\r\n                batch: {},\r\n                onDragover: false,\r\n                onUploading: false\r\n            }\r\n        },\r\n        mounted: function () {\r\n            this.form = document.getElementById('upload_image_form--' + this.input_id);\r\n            this.input = document.getElementById('upload_image_form__input--' + this.input_id);\r\n\r\n            ['drag', 'dragstart', 'dragend',\r\n                'dragover', 'dragenter', 'dragleave', 'drop'].forEach(event => this.form.addEventListener(event, (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }));\r\n\r\n            ['dragover', 'dragenter']\r\n                .forEach(event => this.form.addEventListener(event, this.dragEnter));\r\n\r\n            ['dragleave', 'dragend', 'drop']\r\n                .forEach(event => this.form.addEventListener(event, this.dragLeave));\r\n\r\n            ['drop']\r\n                .forEach(event => this.form.addEventListener(event, this.fileDrop));\r\n\r\n            ['change']\r\n                .forEach(event => this.input.addEventListener(event, this.fileDrop));\r\n\r\n            this.form.addEventListener('click', (e) => {\r\n                this.input.click();\r\n            });\r\n        },\r\n        methods: {\r\n            _can_xhr() {\r\n                if (this.total >= this.max_files) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            _can_upload_file(key) {\r\n                let file = this.files[key];\r\n\r\n                if (file.attempted || file.bad_size) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            _xhr: function (formData, keys, callback) {\r\n                this.onUploading = true;\r\n                this.$emit('upload-image-attempt', formData);\r\n\r\n                keys.forEach((key) => {\r\n                    this.$set(this.files[key], 'attempted', true);\r\n                });\r\n\r\n                this.$http.post(this.url, formData).then((response) => {\r\n                    keys.forEach((key) => {\r\n                        this.$set(this.files[key], 'uploaded', true);\r\n\r\n                        this.total++;\r\n                    });\r\n\r\n                    this.$emit('upload-image-success', [formData, response]);\r\n                }, (response) => {\r\n                    this.$emit('upload-image-failure', [formData, response]);\r\n                }).then((response) => {\r\n                    this.onUploading = false;\r\n\r\n                    callback();\r\n                });\r\n            },\r\n            upload: function () {\r\n                if (!this._can_xhr()) return false;\r\n\r\n                for (let key in this.files) {\r\n                    if (!this._can_upload_file(key)) continue;\r\n\r\n                    let formData = new FormData();\r\n                    formData.append(this.name, this.files[key].file, this.files[key].name);\r\n\r\n                    this._xhr(formData, [key], this.upload);\r\n\r\n                    return true;\r\n                }\r\n            },\r\n            upload_batch: function () {\r\n                if (!this._can_xhr()) return false;\r\n\r\n                for (let key in this.batch) {\r\n                    this._xhr(this.batch[key].form, this.batch[key].keys, this.upload_batch);\r\n\r\n                    delete this.batch[key];\r\n\r\n                    return true;\r\n                }\r\n            },\r\n            create_batch: function () {\r\n                let index = 0;\r\n                let count = 0;\r\n\r\n                this.batch = {};\r\n\r\n                for (let key in this.files) {\r\n                    if (!this._can_upload_file(key)) continue;\r\n\r\n                    if (this.batch[index] == null || count == this.max_batch) {\r\n                        index++;\r\n                        count = 0;\r\n                        this.batch[index] = {form: new FormData(), keys: []};\r\n                    }\r\n\r\n                    count++;\r\n                    this.batch[index]['keys'].push(key);\r\n                    this.batch[index]['form'].append(this.name, this.files[key].file, this.files[key].name);\r\n                }\r\n            },\r\n            submit: function (e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                this.$emit('upload-image-submit', this.files);\r\n\r\n                if(!this.disable_upload && !this.onUploading) {\r\n                    if (this.max_batch > 1) {\r\n                        this.create_batch();\r\n                        return this.upload_batch();\r\n                    }\r\n                    this.upload();\r\n                }\r\n            },\r\n            dragEnter: function (e) {\r\n                e.preventDefault();\r\n                this.onDragover = true;\r\n            },\r\n            dragLeave: function (e) {\r\n                e.preventDefault();\r\n                this.onDragover = false;\r\n            },\r\n            fileDrop: function (e) {\r\n                e.preventDefault();\r\n\r\n                let newFiles = e.target.files || e.dataTransfer.files;\r\n\r\n                for (let i = 0; i < newFiles.length; i++) {\r\n                    this.$set(this.files, this.index, newFiles[i]);\r\n\r\n                    if (newFiles[i].type.match(/image.*/)) {\r\n                        this.fileInit(this.index);\r\n                        this.fileRead(this.index);\r\n\r\n                        this.index++;\r\n                    }\r\n                    ;\r\n                }\r\n                e.target.value = '';\r\n            },\r\n            fileInit: function (key) {\r\n                let file = this.files[key];\r\n\r\n                this.files[key] = {\r\n                    name: this.files[key].name,\r\n                    file: this.files[key]\r\n                };\r\n\r\n                if ((file.size * 0.001) > this.max_filesize) {\r\n                    this.$set(this.files[key], 'bad_size', true);\r\n                }\r\n            },\r\n            fileRead: function (key) {\r\n                let reader = new FileReader();\r\n\r\n                reader.addEventListener(\"load\", (e) => {\r\n                    this.$set(this.image, key, reader.result);\r\n\r\n                    if (this.resize_enabled) {\r\n                        let imager = new Image();\r\n\r\n                        imager.onload = () => {\r\n                            let width = imager.width;\r\n                            let height = imager.height;\r\n\r\n                            if (width > this.resize_max_width || height > this.resize_max_height) {\r\n                                if ((height / width) - (this.resize_max_height / this.resize_max_width) > 0) {\r\n                                    width = this.resize_max_height / height * width;\r\n                                    height = this.resize_max_height;\r\n                                } else {\r\n                                    height = this.resize_max_width / width * height;\r\n                                    width = this.resize_max_width;\r\n                                }\r\n                            }\r\n\r\n                            let canvas = document.createElement(\"canvas\");\r\n                            canvas.width = width;\r\n                            canvas.height = height;\r\n\r\n                            let ctx = canvas.getContext(\"2d\");\r\n                            ctx.drawImage(imager, 0, 0, width, height);\r\n\r\n                            let newImageData = canvas.toDataURL(\"image/png\");\r\n\r\n                            this.$set(this.image, key, newImageData);\r\n\r\n                            //\r\n                            let img = atob(newImageData.split(',')[1]);\r\n                            let img_buffer = [];\r\n                            let i = 0;\r\n                            while (i < img.length) {\r\n                                img_buffer.push(img.charCodeAt(i));\r\n                                i++;\r\n                            }\r\n                            let u8Image = new Uint8Array(img_buffer);\r\n\r\n                            this.$set(this.files, key, {\r\n                                name: this.files[key].name,\r\n                                file: new Blob([u8Image], {filename: this.files[key].name})\r\n                            });\r\n\r\n                            this.$emit('upload-image-loaded', this.files[key]);\r\n                        };\r\n                        imager.src = reader.result;\r\n                    }\r\n                });\r\n\r\n                reader.readAsDataURL(this.files[key].file);\r\n            },\r\n            fileDelete: function (e, key) {\r\n                this.$emit('upload-image-removed', this.files[key]);\r\n                this.$delete(this.files, key);\r\n                this.$delete(this.image, key);\r\n            },\r\n            fileClick: function (e, key) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.$emit('upload-image-clicked', this.files[key]);\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n    .vue_component__upload--image {\r\n        padding: 5px;\r\n        cursor: pointer;\r\n        min-height: 80px;\r\n        border-radius: 5px;\r\n    }\r\n\r\n    .vue_component__upload--image.dragover {\r\n    }\r\n\r\n    .vue_component__upload--image form > div {\r\n        text-align: center;\r\n    }\r\n\r\n    .vue_component__upload--image .upload_image_form__thumbnails {\r\n        margin-bottom: 1em;\r\n    }\r\n\r\n    .vue_component__upload--image .upload_image_form__thumbnail {\r\n        border-radius: 2.5px;\r\n        position: relative;\r\n        width: 20%;\r\n        padding: 20% 0 0;\r\n        overflow: hidden;\r\n        margin: 10px;\r\n        display: inline-block;\r\n    }\r\n\r\n    .vue_component__upload--image .upload_image_form__thumbnail img {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        min-width: 100%;\r\n        min-height: 100%;\r\n        max-height: 150%;\r\n        opacity: 0;\r\n        transform: translateX(-50%) translateY(-50%);\r\n        transition: 1s opacity;\r\n    }\r\n\r\n    .vue_component__upload--image .upload_image_form__thumbnail img.show {\r\n        opacity: 1;\r\n    }\r\n\r\n    .vue_component__upload--image .upload_image_form__thumbnail img:hover {\r\n        filter: blur(2px);\r\n    }\r\n\r\n    .vue_component__upload--image .upload_image_form__thumbnail.bad-size img {\r\n        filter: grayscale(100%);\r\n    }\r\n\r\n    .vue_component__upload--image .upload_image_form__thumbnail.uploaded img {\r\n        opacity: 0.1;\r\n    }\r\n\r\n    .vue_component__upload--image .upload_image_form__thumbnail span {\r\n        position: absolute;\r\n        top: -5px;\r\n        left: 0px;\r\n        z-index: 100;\r\n        padding: 0px 1px;\r\n        border-radius: 2px;\r\n        background-color: grey;\r\n    }\r\n</style>\r\n"]}]}