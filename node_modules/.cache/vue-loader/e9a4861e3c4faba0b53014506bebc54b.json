{"remainingRequest":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\src\\views\\CrearLibro.vue?vue&type=template&id=92b5c916&scoped=true&","dependencies":[{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\src\\views\\CrearLibro.vue","mtime":1575827195880},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\deita\\GoogleDrive\\5º\\TFG\\Fiktin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}